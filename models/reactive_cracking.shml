<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">short</string_value>
  </length>
  <owner>
    <string_value lines="1">oevans</string_value>
  </owner>
  <description>
    <string_value lines="1">Poroelastic model of serpentinization with phase-field cracking</string_value>
  </description>
  <simulations>
    <simulation name="poroelastoreactive_damage">
      <input_file>
        <string_value lines="1" type="filename">reactive_cracking.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <number_processes>
        <integer_value rank="0">48</integer_value>
      </number_processes>
      <parameter_sweep>
        <parameter name="reaction">
          <values>
            <string_value lines="1">serpentine</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

if reaction == "serpentine":
  # Stoichiometry
  nu_A = -0.84
  nu_f = -0.16
  nu_B = 1.

  #Densities
  rho_A = 3300.
  rho_f = 1000.
  rho_B = 2537.

elif reaction == 'magnesite':
  # Stoichiometry
  nu_A = -0.61
  nu_f = -0.36
  nu_B = 1.

  #Densities
  rho_A = 3300.
  rho_f = 900.
  rho_B = 2906.
else:
  print(" Reaction {} not recognized")
  assert(False)
  
#Reference phase fractions 
phi_ref = float(phi0)
phi_A_ref = 1. 
phi_B_ref = 1.

#Reaction rates -  defs consistent with paper
R_phi   = (1. + (nu_B*rho_A)/(nu_A*rho_B))
R_phi_B = -(phi_ref/phi_B_ref)*(nu_B*rho_A)/(nu_A*rho_B)
R_p     = -(1. + nu_f*rho_A/(nu_A*rho_f) + nu_B*rho_A/(nu_A*rho_B))
  
# and write to the tfml file
libspud.set_option("/io/output_base_name",reaction)
libspud.set_option("/system::PoroElastoReactive/coefficient::R_phi/type::Constant/rank::Scalar/value::WholeMesh/constant",R_phi)
libspud.set_option("/system::PoroElastoReactive/coefficient::R_phi_B/type::Constant/rank::Scalar/value::WholeMesh/constant",R_phi_B)
libspud.set_option("/system::PoroElastoReactive/coefficient::R_p/type::Constant/rank::Scalar/value::WholeMesh/constant",R_p)

  
# print some stuff for fun
print("Reaction: {}".format(reaction))
print("    R_phi   = {}".format(R_phi))
print("    R_phi_B = {}".format(R_phi_B))
print("    R_p     = {}".format(R_p))</string_value>
            <single_build/>
          </update>
          <comment>"serpentine" (ol + H20 -&gt; serpentine (+ brucite))</comment>
        </parameter>
        <parameter name="w">
          <values>
            <string_value lines="1">1.e-8</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::PoroElastoReactive/coefficient::w/type::Constant/rank::Scalar/value::WholeMesh/constant",float(w))</string_value>
            <single_build/>
          </update>
          <comment>Crack width</comment>
        </parameter>
        <parameter name="phi0">
          <values>
            <string_value lines="1">0.1</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::PoroElastoReactive/coefficient::phi0/type::Constant/rank::Scalar/value::WholeMesh/constant",float(phi0))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="R">
          <values>
            <string_value lines="1">1.e-3</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::PoroElastoReactive/coefficient::R/type::Constant/rank::Scalar/value::WholeMesh/constant",float(R))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="l">
          <values>
            <string_value lines="1">0.01</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::Damage/coefficient::CrackLength/type::Constant/rank::Scalar/value::WholeMesh/constant",float(l))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="G_c">
          <values>
            <string_value lines="1">5.e-7</string_value>
            <comment>5.9e-6</comment>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::Damage/coefficient::FractureEnergy/type::Constant/rank::Scalar/value::WholeMesh/constant",float(G_c))</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <required_input>
        <filenames name="Mesh">
          <string>
            <string_value lines="1" type="filename">mesh/rectangle.xml</string_value>
          </string>
        </filenames>
      </required_input>
    </simulation>
  </simulations>
</harness_options>
